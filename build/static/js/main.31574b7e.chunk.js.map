{"version":3,"sources":["constants/index.js","actions/index.js","components/home.js","components/players.js","components/playerlist.js","components/scoreboard.js","components/totalscore.js","helpers/index.js","components/playgroud.js","App.js","reportWebVitals.js","reducers/homeReducer.js","reducers/playerReducer.js","reducers/scoreReducer.js","reducers/index.js","index.js"],"names":["SAVE_NUMBER_PLAYER","SAVE_NAME_PLAYER","CALL","FINAL","NEXT","MAX","saveNameOfPlayer","payload","type","Home","numberOfPlayer","useSelector","state","home","dispatch","useDispatch","console","log","className","style","color","textDecoration","min","max","name","value","required","onChange","e","target","to","Players","navigate","useNavigate","inputElement","useRef","useState","playerName","setplayerName","playerNumber","setPlayerNumber","autoFocus","ref","href","onClick","current","focus","Playerlist","nameOfPlayers","player","score","maxHands","Container","Row","Col","md","map","idx","length","Scoreboard","call","final","round","Array","fill","invalid","setInvalid","setmax","totalSum","settotalSum","maxCard","Math","floor","numberOfHands","checkInvalid","index","undefined","calculateHands","sum","maxValue","ele","parseInt","callPlayerHand","xs","finalPlayerHand","Totalscore","lastRound","total","result","nameOfPlayer","lastRoundScore","totalScore","push","sort","a","b","float","class","arrayRotate","arr","reverse","unshift","pop","shift","Playgroud","graphData","maxRound","newGraphData","nextRoundCall","roundScore","callHand","finalHand","calculateScore","newTotalScore","i","thisRound","outerSplitRotate","splice","toString","calculateTotalScore","newRound","nextRound","marginTop","marginLeft","opacity","chartType","width","height","data","options","title","curveType","legend","position","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","combineReducers","store","createStore","rootReducer","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31574b7e.chunk.js","sourcesContent":["export const SAVE_NUMBER_PLAYER = \"SAVE_NUMBER_PLAYER\";\n\nexport const SAVE_NAME_PLAYER = \"SAVE_NAME_PLAYER\";\n\nexport const CALL = \"CALL_PLAYER_HANDS\";\n\nexport const FINAL = \"FINAL_PLAYER_HANDS\";\n\nexport const TOTAL = \"TOTAL_PLAYER\";\n\nexport const NEXT = \"NEXT_ROUND\";\n\nexport const MAX = \"SET_MAX_HANDS\";\n","import {\n  SAVE_NUMBER_PLAYER,\n  SAVE_NAME_PLAYER,\n  CALL,\n  FINAL,\n  TOTAL,\n  MAX,\n  NEXT,\n} from \"../constants\";\n\nexport function saveNumberOfPlayer(payload) {\n  return { type: SAVE_NUMBER_PLAYER, payload };\n}\n\nexport function saveNameOfPlayer(payload) {\n  return { type: SAVE_NAME_PLAYER, payload };\n}\n\nexport function callPlayerHand(call, idx) {\n  console.log(call);\n  return { type: CALL, payload: { call: call, idx: idx } };\n}\n\nexport function finalPlayerHand(final, idx) {\n  return { type: FINAL, payload: { final: final, idx: idx } };\n}\n\nexport function totalScore(payload) {\n  return { type: TOTAL, payload };\n}\n\nexport function nextRound(\n  newRound,\n  numberOfPlayer,\n  roundScore,\n  newTotalScore,\n  graphData\n) {\n  return {\n    type: NEXT,\n    payload: { newRound, numberOfPlayer, roundScore, newTotalScore, graphData },\n  };\n}\n\nexport function setMaxHands(payload) {\n  return { type: MAX, payload };\n}\n","import React, {useState, useEffect} from 'react'\nimport '../assets/css/home.css';\nimport {  useSelector, useDispatch } from \"react-redux\";\nimport { saveNumberOfPlayer } from '../actions';\nimport {Link} from \"react-router-dom\";\nimport { FaTrophy } from 'react-icons/fa';\n\nimport { GiLaurelsTrophy, GiDiamondTrophy} from 'react-icons/gi';\n\n\n  function Home({}) {\n    const {numberOfPlayer} = useSelector(state=>state?.home)\n    const dispatch = useDispatch();\n    console.log(numberOfPlayer, 'numberOfPlayer')\n    \n    return (\n        <div>\n            <div className=\"login-box\">\n                <h2 style={{color: '#546ccf', textDecoration:'underline'}}>Estimate</h2>\n                <form>\n                    <div className=\"user-box\">\n                        <input type=\"number\" min=\"1\" max=\"10\" name=\"\" value={numberOfPlayer} required=\"\"  onChange={(e)=>dispatch(saveNumberOfPlayer(e.target.value))}/>\n                        <label>Enter number of Players</label>\n                        <FaTrophy className='bronze-icon'/>\n                        <GiDiamondTrophy className='golden-icon'/>\n                        <GiLaurelsTrophy className='silver-icon'/>\n                    </div>\n                    <Link className=\"link\" to=\"/players\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        Start Game\n                    </Link>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","import React, { useState, useRef } from 'react'\nimport '../assets/css/home.css';\nimport {  useSelector, useDispatch } from \"react-redux\";\nimport {saveNameOfPlayer} from '../actions'\nimport { useNavigate } from \"react-router-dom\";\nimport { FaTrophy } from 'react-icons/fa';\nimport { GiLaurelsTrophy, GiDiamondTrophy} from 'react-icons/gi';\n\n\nfunction Players() {\n    const {numberOfPlayer} = useSelector(state=>state?.home)\n    const dispatch = useDispatch();\n    let navigate = useNavigate();\n    const inputElement = useRef(null);\n\n    \n\n    const [playerName, setplayerName] = useState('')\n    const [playerNumber, setPlayerNumber] = useState(1)\n    \n    console.log(numberOfPlayer);\n\n    const savePlayerName = () =>{\n        if(numberOfPlayer != playerNumber){\n            dispatch(saveNameOfPlayer(playerName))\n            setplayerName('');\n            setPlayerNumber(playerNumber+1);\n        }\n        else{\n            dispatch(saveNameOfPlayer(playerName))\n            setplayerName('');\n            navigate('/playground')\n        }\n        inputElement.current.focus();\n\n    }\n\n    return (\n        <div>\n                <div className=\"login-box\">\n                <h2 style={{color:'#546ccf'}}>Estimate</h2>\n                <form>\n                    <div className=\"user-box\">\n                        <input type=\"text\" value={playerName} autoFocus ref={inputElement} onChange={(e)=> setplayerName(e.target.value)} />\n                        <label>Player {playerNumber}  </label>\n                        <FaTrophy className='bronze-icon'/>\n                        <GiDiamondTrophy className='golden-icon'/>\n                        <GiLaurelsTrophy className='silver-icon'/>\n                    </div>\n                    <a href=\"#\" onClick={()=>savePlayerName()} type=\"submit\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        {playerNumber != numberOfPlayer ? 'Next' : 'Lets Play'}\n                    </a>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Players;\n","import React, { useState, useEffect } from 'react'\nimport '../assets/css/home.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { saveNumberOfPlayer } from '../actions';\nimport { Link } from \"react-router-dom\";\nimport { CgCardSpades} from 'react-icons/cg';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nfunction Playerlist({ }) {\n    const { nameOfPlayers } = useSelector(state => state?.player)\n    const { maxHands } = useSelector(state => state?.score)\n    \n    return (\n        <div >\n            <Container>\n            <Row>\n                <Col md={1} className=\"d-none d-sm-block\">\n                </Col>\n            {nameOfPlayers.map((name,idx) => {\n                return <Col><span className=\"playerName\">{name} {idx == nameOfPlayers.length-1 ?<CgCardSpades color='red'/>: ''}</span></Col>\n            })\n        }\n        </Row>    \n        </Container>\n        </div>\n    )\n}\n\nexport default Playerlist;\n","import React, { useState, useRef } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport '../assets/css/home.css';\nimport { callPlayerHand, finalPlayerHand } from '../actions';\nimport { setMaxHands } from '../actions';\nimport { Row, Col, Container } from 'react-bootstrap';\n\n\nfunction Scoreboard() {\n    const { nameOfPlayers } = useSelector(state => state?.player)\n    const { call, final, round } = useSelector(state => state?.score)\n    const { numberOfPlayer } = useSelector(state => state?.home)\n    let [invalid, setInvalid] = useState(new Array(numberOfPlayer).fill(true))\n    const [max, setmax] = useState(0)\n    const [totalSum, settotalSum] = useState(0)\n\n\n    const maxCard = Math.floor(52 / numberOfPlayer);\n    const numberOfHands = maxCard - round + 1 >= 1 ? maxCard - round + 1 : round - maxCard + 1;\n    const dispatch = useDispatch();\n\n\n    const checkInvalid = () => {\n        console.log('hi')\n        let invalid = new Array(numberOfPlayer).fill(true);\n        for (let index = 0; index < numberOfPlayer; index++) {\n            if (call[index] != undefined && call[index] != '' && final[index] != undefined && final[index] != '') {\n                console.log('call[index', call[index]);\n                if (call[index] != final[index]) {\n                    invalid[index] = false;\n                }\n            }\n            else{\n                setInvalid((new Array(numberOfPlayer).fill(true)));\n                break;\n\n            }\n\n            setInvalid(invalid);\n            // console.log(invalid)\n        }\n    }\n    console.log(\"🚀 ~ file: scoreboard.js ~ line 35 ~ checkInvalid ~ invalid\", invalid)\n\n    const calculateHands = (e, idx) => {\n        if (idx == 0) {\n            settotalSum(0)\n        }\n        let sum = 0;\n        let value = e.target.value;\n        let max = 0;\n        let maxValue = 0;\n        for (let ele in call) {\n            if (call[ele] > -1 && call[ele] != '') {\n\n                if (maxValue < parseInt(call[ele])) {\n                    maxValue = parseInt(call[ele]);\n                    max = parseInt(ele);\n                    console.log(maxValue, ele);\n                }\n\n                if (ele != numberOfPlayer - 1)\n                    if (ele == idx) {\n                        sum = sum + parseInt(value)\n                    }\n                    else {\n                        sum = sum + parseInt(call[ele])\n                    }\n                else\n                    sum = sum + ((value && value != 0) ? parseInt(value) : 0);\n            }\n            else {\n                if (ele == idx) {\n                    sum = sum + parseInt(value)\n                }\n            }\n        }\n        if (call[idx] == undefined) {\n            sum = sum + ((value && value != 0) ? parseInt(value) : 0);\n        }\n        if (sum == numberOfHands) {\n            if (idx == numberOfPlayer - 1) {\n                if (value >= numberOfHands) {\n                    value--;\n                    sum--;\n                }\n                else {\n                    value++;\n                    sum++;\n                }\n            }\n        }\n        if (value > numberOfHands) {\n            if (sum >= numberOfHands) {\n                value = numberOfHands - 1;\n            }\n            else {\n                value = numberOfHands;\n            }\n        }\n        settotalSum(sum)\n        console.log(\"🚀 ~ file: scoreboard.js ~ line 79 ~ calculateHands ~ sum\", sum)\n        setmax(max)\n        dispatch(callPlayerHand(value, idx))\n        dispatch(setMaxHands(max))\n        checkInvalid();\n    }\n\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col xs={12} md={1}>\n                        <span className=\"sideHeading\"> Call </span>\n                    </Col>\n                    {nameOfPlayers.map((name, idx) => {\n                        return <Col><input type='number' className={(!invalid[idx] && invalid[idx] != undefined && invalid[idx] !== '') ? \"inputBoxRed\" : \"inputBox\"} max={numberOfHands} value={call[idx]} onChange={(e) => calculateHands(e, idx)}></input></Col>\n                    })\n                    }\n                </Row>\n                <br />\n                <Row>\n                    <Col className='totalCall'>\n\n                        {\n                            call[nameOfPlayers.length - 1] != undefined && call[nameOfPlayers.length - 1] != '' ?\n                                <span className='totalCall' >\n                                    Total Call: {totalSum}\n                                </span>\n\n                                :\n                                <>\n                                    {totalSum <= numberOfHands && call[nameOfPlayers.length - 2] >= 0 ?\n                                        <span className='lastNotCall' >\n                                            Last Player can't call : {numberOfHands - totalSum}\n                                        </span> : <></>\n                                    }\n                                </>\n\n                        }\n\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={12} md={1}>\n\n                        <span className=\"sideHeading\"> Final </span>\n                    </Col>\n                    {nameOfPlayers.map((player, idx) => {\n                        return <Col><input type='number' className={(!invalid[idx] && invalid[idx] != undefined && invalid[idx] !== '') ? \"inputBoxRed\" : \"inputBox\"} value={final[idx]} max={numberOfHands} onChange={(e) => {\n                            dispatch(finalPlayerHand(e.target.value, idx))\n                            checkInvalid();\n                        }\n                        }>\n                        </input></Col>\n                    })\n                    }\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport \"../assets/css/home.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FaTrophy, FaCanadianMapleLeaf } from \"react-icons/fa\";\nimport { GiLaurelsTrophy, GiDiamondTrophy } from \"react-icons/gi\";\n\nfunction Totalscore() {\n  const { nameOfPlayers } = useSelector((state) => state?.player);\n  const { lastRound, total } = useSelector((state) => state?.score);\n\n  let result = [];\n  for (let index = 0; index < nameOfPlayers.length; index++) {\n    const nameOfPlayer = nameOfPlayers[index];\n    const lastRoundScore = lastRound[index];\n    const totalScore = total[index];\n    result.push({ nameOfPlayer, lastRoundScore, totalScore });\n  }\n\n  result.sort((a, b) => (a.totalScore < b.totalScore ? 1 : -1));\n\n  return (\n    <div style={{ float: \"right\" }}>\n      <ul class=\"item1\">\n        <li style={{ color: \"#97bbfe\" }}>Total Score</li>\n        {result.map((player, idx) => {\n          return (\n            <li\n              className={\n                idx == 0\n                  ? \"golden\"\n                  : idx == 1\n                  ? \"silver\"\n                  : idx == 2\n                  ? \"bronze\"\n                  : idx == result.length - 1 || idx == result.length - 2\n                  ? \"green\"\n                  : \"\"\n              }\n            >\n              {idx + 1} &nbsp;&nbsp;\n              {`${player.nameOfPlayer} : ${\n                player.totalScore != undefined ? player.totalScore : 0\n              }(${\n                player.lastRoundScore != undefined ? player.lastRoundScore : 0\n              })`}\n              &nbsp;&nbsp;&nbsp;\n              {idx == 0 ? (\n                <GiDiamondTrophy />\n              ) : idx == 1 ? (\n                <GiLaurelsTrophy />\n              ) : idx == 2 ? (\n                <FaTrophy />\n              ) : idx == result.length - 1 || idx == result.length - 2 ? (\n                <FaCanadianMapleLeaf />\n              ) : (\n                \"\"\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default Totalscore;\n","export default function arrayRotate(arr, reverse) {\n  if (reverse) arr.unshift(arr.pop());\n  else arr.push(arr.shift());\n  return arr;\n}\n","import React from \"react\";\nimport Playerlist from \"./playerlist\";\nimport Scoreboard from \"./scoreboard\";\nimport Totalscore from \"./totalscore\";\nimport \"../assets/css/home.css\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport { Chart } from \"react-google-charts\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nextRound } from \"../actions\";\nimport arrayRotate from \"../helpers\";\nexport default function Playgroud() {\n  const { round, call, final, total, graphData } = useSelector(\n    (state) => state?.score\n  );\n  console.log(\"~ graphData\", graphData);\n\n  const { nameOfPlayers } = useSelector((state) => state?.player);\n\n  console.log(\"~ total\", total);\n  const { numberOfPlayer } = useSelector((state) => state?.home);\n  const maxCard = Math.floor(52 / numberOfPlayer);\n  const numberOfHands =\n    maxCard - round + 1 >= 1 ? maxCard - round + 1 : round - maxCard + 1;\n  const maxRound = maxCard + maxCard - 1;\n\n  const options = {\n    title: \"Performance Analytics\",\n    curveType: \"function\",\n    legend: { position: \"bottom\" },\n    // backgroundColor: \"black\",\n  };\n  const dispatch = useDispatch();\n\n  const calculateScore = () => {\n    let roundScore = [];\n    let score = 0;\n    for (let idx = 0; idx < numberOfPlayer; idx++) {\n      score = 0;\n      const callHand = call[idx];\n      const finalHand = final[idx];\n\n      if (callHand == finalHand) {\n        score = parseInt(numberOfHands) + callHand;\n      } else {\n        if (callHand == 0) {\n          score = 0 - finalHand;\n        } else if (callHand > finalHand) {\n          score = callHand - (callHand - finalHand);\n        } else {\n          score = callHand + (callHand - finalHand);\n        }\n      }\n      roundScore.push(score);\n    }\n    return roundScore;\n  };\n  const newGraphData = [];\n\n  const calculateTotalScore = (roundScore) => {\n    let newTotalScore = [];\n    for (let idx = 0; idx < numberOfPlayer; idx++) {\n      const score = roundScore[idx];\n      newTotalScore[idx] = (total[idx] ? total[idx] : 0) + parseInt(score);\n    }\n    for (let i = 0; i < graphData.length; i++) {\n      if (i === 0) {\n        newGraphData.push([\"Round\", ...nameOfPlayers]);\n      } else {\n        const thisRound = graphData[i][0];\n        console.log(\"~ thisRound\", thisRound);\n        const outerSplit = graphData[i].splice(1, graphData[i].length - 1);\n        const outerSplitRotate = arrayRotate(outerSplit);\n        console.log(\"~ outerSplitRotate\", outerSplitRotate);\n        newGraphData.push([thisRound, ...outerSplitRotate]);\n      }\n    }\n    newGraphData.push([round.toString(), ...newTotalScore]);\n    return newTotalScore;\n  };\n\n  const nextRoundCall = () => {\n    if (round == 1) {\n      graphData.push([\"Round\", ...nameOfPlayers]);\n    }\n\n    let roundScore = calculateScore();\n    let newTotalScore = calculateTotalScore(roundScore);\n    dispatch(\n      nextRound(\n        round + 1,\n        parseInt(numberOfPlayer),\n        roundScore,\n        newTotalScore,\n        newGraphData\n      )\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={12} md={2}>\n          <h1 className=\"round\">Round {round}</h1>\n        </Col>\n\n        <Col xs={12} md={8}>\n          <h1 className=\"title\">Estimate </h1>\n        </Col>\n        <Col xs={12} md={2}>\n          <h1 className=\"hands\">Hands {numberOfHands}</h1>\n        </Col>\n      </Row>\n      <Row style={{ marginTop: \"4%\" }}>\n        <Col xs={12} md={10}>\n          <Playerlist />\n          <Scoreboard />\n        </Col>\n        <Col xs={9} md={2}>\n          <Totalscore />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <center>\n            <span className=\"nextRound\" onClick={() => nextRoundCall()}>\n              {round != maxRound ? `Next Round` : `Final Result`}\n            </span>\n          </center>\n        </Col>\n      </Row>\n      <Row style={{ marginLeft: \"8%\", marginTop: \"4%\", opacity: \"0.6\" }}>\n        <Col>\n          <center>\n            <Chart\n              chartType=\"Line\"\n              width=\"100%\"\n              height=\"250px\"\n              data={graphData}\n              options={options}\n            />\n          </center>\n        </Col>\n      </Row>\n      {/* <div style={{float:'right'}}>\n            </div> */}\n    </Container>\n  );\n}\n","import {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\nimport HomeComp from './components/home';\nimport Players from './components/players';\nimport Playground from './components/playgroud'\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/players\" element={<Players/>}>\n        </Route>\n        <Route path=\"/playground\" element={<Playground/>}>\n        </Route>\n        <Route path=\"/\" element={<HomeComp/>}>\n        </Route>\n      </Routes>\n  </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SAVE_NUMBER_PLAYER } from \"../constants\";\n\nconst initialState = {\n  numberOfPlayer: \"\",\n};\n\nconst home = (state = initialState, action) => {\n  switch (action.type) {\n    case SAVE_NUMBER_PLAYER:\n      return {\n        ...state,\n        numberOfPlayer: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default home;\n","import {SAVE_NAME_PLAYER,NEXT} from '../constants'\nimport arrayRotate from '../helpers';\n\nconst initialState = {\n    nameOfPlayers: []\n};\n\n\nconst player = (state = initialState, action) => {\n    console.log(action)\n    switch (action.type) {\n      case SAVE_NAME_PLAYER:\n        return {\n            ...state,\n            nameOfPlayers: [...state.nameOfPlayers, action.payload]\n        }\n        case NEXT:{\n            return {\n                ...state,\n                nameOfPlayers: arrayRotate(state.nameOfPlayers)\n            }   \n        } \n      default:\n        return state\n    }\n  }\n  \n  export default player;\n  ","import { CALL, FINAL, TOTAL, NEXT, MAX } from \"../constants\";\nimport arrayRotate from \"../helpers\";\n\nconst initialState = {\n  round: 1,\n  call: [],\n  final: [],\n  total: [],\n  lastRound: [],\n  maxHands: 0,\n  graphData: [],\n};\n\nconst score = (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case CALL:\n      if (state.call[action.payload.idx] != undefined) {\n        return {\n          ...state,\n          call: state.call.map((call, idx) =>\n            idx === action.payload.idx ? parseInt(action.payload.call) : call\n          ),\n        };\n      } else {\n        return {\n          ...state,\n          call: [...state.call, parseInt(action.payload.call)],\n        };\n      }\n      break;\n\n    case FINAL:\n      if (state.final[action.payload.idx] != undefined) {\n        return {\n          ...state,\n          final: state.final.map((final, idx) =>\n            idx === action.payload.idx ? parseInt(action.payload.final) : final\n          ),\n        };\n      } else {\n        return {\n          ...state,\n          final: [...state.final, parseInt(action.payload.final)],\n        };\n      }\n    case NEXT: {\n      // eslint-disable-next-line no-lone-blocks\n      return {\n        ...state,\n        call: new Array(action.payload.numberOfPlayer).fill(\"\"),\n        final: new Array(action.payload.numberOfPlayer).fill(\"\"),\n        round: action.payload.newRound,\n        total: arrayRotate(action.payload.newTotalScore),\n        lastRound: arrayRotate(action.payload.roundScore),\n        maxHands: 0,\n        graphData: action.payload.graphData,\n      };\n    }\n\n    case MAX: {\n      // eslint-disable-next-line no-lone-blocks\n      return {\n        ...state,\n        maxHands: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default score;\n","import { combineReducers } from 'redux'\nimport home from \"./homeReducer\";\nimport player from \"./playerReducer\";\nimport score from \"./scoreReducer\";\n\nexport default combineReducers({\n    home,\n    player,\n    score\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport './assets/css/home.css'\n\n\n\nconst store = createStore(rootReducer)\nwindow.store = store;\n\n\nconsole.log(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}