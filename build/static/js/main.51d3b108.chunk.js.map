{"version":3,"sources":["constants/index.js","actions/index.js","components/home.js","components/players.js","components/playerlist.js","components/scoreboard.js","components/totalscore.js","components/playgroud.js","App.js","reportWebVitals.js","reducers/homeReducer.js","helpers/index.js","reducers/playerReducer.js","reducers/scoreReducer.js","reducers/index.js","index.js"],"names":["SAVE_NUMBER_PLAYER","SAVE_NAME_PLAYER","CALL","FINAL","NEXT","MAX","saveNameOfPlayer","payload","type","Home","numberOfPlayer","useSelector","state","home","dispatch","useDispatch","console","log","className","style","color","textDecoration","min","max","name","value","required","onChange","e","target","to","Players","navigate","useNavigate","inputElement","useRef","useState","playerName","setplayerName","playerNumber","setPlayerNumber","autoFocus","ref","href","onClick","current","focus","Playerlist","nameOfPlayers","player","score","maxHands","Container","Row","Col","md","map","idx","length","Scoreboard","call","final","round","Array","fill","invalid","setInvalid","setmax","totalSum","settotalSum","maxCard","Math","floor","numberOfHands","checkInvalid","index","undefined","calculateHands","sum","maxValue","ele","parseInt","callPlayerHand","xs","finalPlayerHand","Totalscore","lastRound","total","result","nameOfPlayer","lastRoundScore","totalScore","push","sort","a","b","float","class","Playgroud","maxRound","nextRoundCall","roundScore","callHand","finalHand","calculateScore","newTotalScore","calculateTotalScore","newRound","nextRound","marginTop","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","arrayRotate","arr","reverse","unshift","pop","shift","combineReducers","store","createStore","rootReducer","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51d3b108.chunk.js","sourcesContent":["export const SAVE_NUMBER_PLAYER = \"SAVE_NUMBER_PLAYER\";\n\nexport const SAVE_NAME_PLAYER = \"SAVE_NAME_PLAYER\";\n\nexport const CALL = \"CALL_PLAYER_HANDS\";\n\nexport const FINAL = \"FINAL_PLAYER_HANDS\";\n\nexport const TOTAL = \"TOTAL_PLAYER\";\n\nexport const NEXT = \"NEXT_ROUND\";\n\nexport const MAX = \"SET_MAX_HANDS\";\n","import {\n  SAVE_NUMBER_PLAYER,\n  SAVE_NAME_PLAYER,\n  CALL,\n  FINAL,\n  TOTAL,\n  MAX,\n  NEXT} from '../constants'\n\n\nexport function saveNumberOfPlayer(payload) {\n    return { type: SAVE_NUMBER_PLAYER, payload }\n  };\n\n\nexport function saveNameOfPlayer(payload) {\n    return { type: SAVE_NAME_PLAYER, payload }\n};\n\nexport function callPlayerHand(call, idx) {\n  console.log(call)\n  return { type: CALL, payload:{'call': call, 'idx': idx} }\n};\n\nexport function finalPlayerHand(final, idx) {\n  return { type: FINAL, payload:{'final': final, 'idx': idx} }\n};\n\nexport function totalScore(payload) {\n  return { type: TOTAL, payload }\n};\n\nexport function nextRound(newRound,numberOfPlayer, roundScore, newTotalScore ) {\n  return { type: NEXT, payload :{newRound,numberOfPlayer, roundScore, newTotalScore} }\n};\n\n\nexport function setMaxHands(payload) {\n  return { type: MAX, payload }\n};","import React, {useState, useEffect} from 'react'\nimport '../assets/css/home.css';\nimport {  useSelector, useDispatch } from \"react-redux\";\nimport { saveNumberOfPlayer } from '../actions';\nimport {Link} from \"react-router-dom\";\nimport { FaTrophy } from 'react-icons/fa';\n\nimport { GiLaurelsTrophy, GiDiamondTrophy} from 'react-icons/gi';\n\n\n  function Home({}) {\n    const {numberOfPlayer} = useSelector(state=>state?.home)\n    const dispatch = useDispatch();\n    console.log(numberOfPlayer, 'numberOfPlayer')\n    \n    return (\n        <div>\n            <div className=\"login-box\">\n                <h2 style={{color: '#546ccf', textDecoration:'underline'}}>Estimate</h2>\n                <form>\n                    <div className=\"user-box\">\n                        <input type=\"number\" min=\"1\" max=\"10\" name=\"\" value={numberOfPlayer} required=\"\"  onChange={(e)=>dispatch(saveNumberOfPlayer(e.target.value))}/>\n                        <label>Enter number of Players</label>\n                        <FaTrophy className='bronze-icon'/>\n                        <GiDiamondTrophy className='golden-icon'/>\n                        <GiLaurelsTrophy className='silver-icon'/>\n                    </div>\n                    <Link className=\"link\" to=\"/players\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        Start Game\n                    </Link>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","import React, { useState, useRef } from 'react'\nimport '../assets/css/home.css';\nimport {  useSelector, useDispatch } from \"react-redux\";\nimport {saveNameOfPlayer} from '../actions'\nimport { useNavigate } from \"react-router-dom\";\nimport { FaTrophy } from 'react-icons/fa';\nimport { GiLaurelsTrophy, GiDiamondTrophy} from 'react-icons/gi';\n\n\nfunction Players() {\n    const {numberOfPlayer} = useSelector(state=>state?.home)\n    const dispatch = useDispatch();\n    let navigate = useNavigate();\n    const inputElement = useRef(null);\n\n    \n\n    const [playerName, setplayerName] = useState('')\n    const [playerNumber, setPlayerNumber] = useState(1)\n    \n    console.log(numberOfPlayer);\n\n    const savePlayerName = () =>{\n        if(numberOfPlayer != playerNumber){\n            dispatch(saveNameOfPlayer(playerName))\n            setplayerName('');\n            setPlayerNumber(playerNumber+1);\n        }\n        else{\n            dispatch(saveNameOfPlayer(playerName))\n            setplayerName('');\n            navigate('/playground')\n        }\n        inputElement.current.focus();\n\n    }\n\n    return (\n        <div>\n                <div className=\"login-box\">\n                <h2 style={{color:'#546ccf'}}>Estimate</h2>\n                <form>\n                    <div className=\"user-box\">\n                        <input type=\"text\" value={playerName} autoFocus ref={inputElement} onChange={(e)=> setplayerName(e.target.value)} />\n                        <label>Player {playerNumber}  </label>\n                        <FaTrophy className='bronze-icon'/>\n                        <GiDiamondTrophy className='golden-icon'/>\n                        <GiLaurelsTrophy className='silver-icon'/>\n                    </div>\n                    <a href=\"#\" onClick={()=>savePlayerName()} type=\"submit\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                        {playerNumber != numberOfPlayer ? 'Next' : 'Lets Play'}\n                    </a>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Players;\n","import React, { useState, useEffect } from 'react'\nimport '../assets/css/home.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { saveNumberOfPlayer } from '../actions';\nimport { Link } from \"react-router-dom\";\nimport { CgCardSpades} from 'react-icons/cg';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nfunction Playerlist({ }) {\n    const { nameOfPlayers } = useSelector(state => state?.player)\n    const { maxHands } = useSelector(state => state?.score)\n    \n    return (\n        <div >\n            <Container>\n            <Row>\n                <Col md={1} className=\"d-none d-sm-block\">\n                </Col>\n            {nameOfPlayers.map((name,idx) => {\n                return <Col><span className=\"playerName\">{name} {idx == nameOfPlayers.length-1 ?<CgCardSpades color='red'/>: ''}</span></Col>\n            })\n        }\n        </Row>    \n        </Container>\n        </div>\n    )\n}\n\nexport default Playerlist;\n","import React, { useState, useRef } from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport '../assets/css/home.css';\nimport { callPlayerHand, finalPlayerHand } from '../actions';\nimport { setMaxHands } from '../actions';\nimport { Row, Col, Container } from 'react-bootstrap';\n\n\nfunction Scoreboard() {\n    const { nameOfPlayers } = useSelector(state => state?.player)\n    const { call, final, round } = useSelector(state => state?.score)\n    const { numberOfPlayer } = useSelector(state => state?.home)\n    let [invalid, setInvalid] = useState(new Array(numberOfPlayer).fill(true))\n    const [max, setmax] = useState(0)\n    const [totalSum, settotalSum] = useState(0)\n\n\n    const maxCard = Math.floor(52 / numberOfPlayer);\n    const numberOfHands = maxCard - round + 1 >= 1 ? maxCard - round + 1 : round - maxCard + 1;\n    const dispatch = useDispatch();\n\n\n    const checkInvalid = () => {\n        console.log('hi')\n        let invalid = new Array(numberOfPlayer).fill(true);\n        for (let index = 0; index < numberOfPlayer; index++) {\n            if (call[index] != undefined && call[index] != '' && final[index] != undefined && final[index] != '') {\n                console.log('call[index', call[index]);\n                if (call[index] != final[index]) {\n                    invalid[index] = false;\n                }\n            }\n            else{\n                setInvalid((new Array(numberOfPlayer).fill(true)));\n                break;\n\n            }\n\n            setInvalid(invalid);\n            // console.log(invalid)\n        }\n    }\n    console.log(\"🚀 ~ file: scoreboard.js ~ line 35 ~ checkInvalid ~ invalid\", invalid)\n\n    const calculateHands = (e, idx) => {\n        if (idx == 0) {\n            settotalSum(0)\n        }\n        let sum = 0;\n        let value = e.target.value;\n        let max = 0;\n        let maxValue = 0;\n        for (let ele in call) {\n            if (call[ele] > -1 && call[ele] != '') {\n\n                if (maxValue < parseInt(call[ele])) {\n                    maxValue = parseInt(call[ele]);\n                    max = parseInt(ele);\n                    console.log(maxValue, ele);\n                }\n\n                if (ele != numberOfPlayer - 1)\n                    if (ele == idx) {\n                        sum = sum + parseInt(value)\n                    }\n                    else {\n                        sum = sum + parseInt(call[ele])\n                    }\n                else\n                    sum = sum + ((value && value != 0) ? parseInt(value) : 0);\n            }\n            else {\n                if (ele == idx) {\n                    sum = sum + parseInt(value)\n                }\n            }\n        }\n        if (call[idx] == undefined) {\n            sum = sum + ((value && value != 0) ? parseInt(value) : 0);\n        }\n        if (sum == numberOfHands) {\n            if (idx == numberOfPlayer - 1) {\n                if (value >= numberOfHands) {\n                    value--;\n                    sum--;\n                }\n                else {\n                    value++;\n                    sum++;\n                }\n            }\n        }\n        if (value > numberOfHands) {\n            if (sum >= numberOfHands) {\n                value = numberOfHands - 1;\n            }\n            else {\n                value = numberOfHands;\n            }\n        }\n        settotalSum(sum)\n        console.log(\"🚀 ~ file: scoreboard.js ~ line 79 ~ calculateHands ~ sum\", sum)\n        setmax(max)\n        dispatch(callPlayerHand(value, idx))\n        dispatch(setMaxHands(max))\n        checkInvalid();\n    }\n\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col xs={12} md={1}>\n                        <span className=\"sideHeading\"> Call </span>\n                    </Col>\n                    {nameOfPlayers.map((name, idx) => {\n                        return <Col><input type='number' className={(!invalid[idx] && invalid[idx] != undefined && invalid[idx] !== '') ? \"inputBoxRed\" : \"inputBox\"} max={numberOfHands} value={call[idx]} onChange={(e) => calculateHands(e, idx)}></input></Col>\n                    })\n                    }\n                </Row>\n                <br />\n                <Row>\n                    <Col className='totalCall'>\n\n                        {\n                            call[nameOfPlayers.length - 1] != undefined && call[nameOfPlayers.length - 1] != '' ?\n                                <span className='totalCall' >\n                                    Total Call: {totalSum}\n                                </span>\n\n                                :\n                                <>\n                                    {totalSum <= numberOfHands && call[nameOfPlayers.length - 2] >= 0 ?\n                                        <span className='lastNotCall' >\n                                            Last Player can't call : {numberOfHands - totalSum}\n                                        </span> : <></>\n                                    }\n                                </>\n\n                        }\n\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={12} md={1}>\n\n                        <span className=\"sideHeading\"> Final </span>\n                    </Col>\n                    {nameOfPlayers.map((player, idx) => {\n                        return <Col><input type='number' className={(!invalid[idx] && invalid[idx] != undefined && invalid[idx] !== '') ? \"inputBoxRed\" : \"inputBox\"} value={final[idx]} max={numberOfHands} onChange={(e) => {\n                            dispatch(finalPlayerHand(e.target.value, idx))\n                            checkInvalid();\n                        }\n                        }>\n                        </input></Col>\n                    })\n                    }\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Scoreboard;\n","import React from 'react'\nimport '../assets/css/home.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FaTrophy } from 'react-icons/fa';\nimport { GiLaurelsTrophy, GiDiamondTrophy} from 'react-icons/gi';\n\nfunction Totalscore() {\n    const { nameOfPlayers } = useSelector(state => state?.player)\n    const { lastRound,total } = useSelector(state => state?.score)\n\n    let result = [];\n    for (let index = 0; index < nameOfPlayers.length; index++) {\n        const nameOfPlayer = nameOfPlayers[index];\n        const lastRoundScore = lastRound[index];\n        const totalScore = total[index];\n        result.push({nameOfPlayer,lastRoundScore,totalScore})\n    }\n\n    result.sort((a, b) => (a.totalScore < b.totalScore) ? 1 : -1)\n\n    return (\n        <div style={{float: 'right'}}>\n            <ul class=\"item1\">\n                <li style={{color:\"#97bbfe\"}}>Total Score</li>\n                {result.map((player,idx) => {\n                    return <li className={ idx == 0 ? 'golden' : idx == 1 ? 'silver' : idx == 2 ? 'bronze' : ''}>\n                        {idx+1}{' '}&nbsp;&nbsp;{`${player.nameOfPlayer} : ${player.totalScore!=undefined ? player.totalScore: 0}(${player.lastRoundScore != undefined ? player.lastRoundScore : 0})`}\n                          &nbsp;&nbsp;&nbsp;{ idx == 0 ? <GiDiamondTrophy/> : idx == 1 ? <GiLaurelsTrophy/> : idx == 2 ? <FaTrophy/> : ''}\n                        </li>\n                })\n                }\n\n            </ul>\n        </div>\n    )\n}\n\n\nexport default Totalscore;","import React from 'react'\nimport Playerlist from './playerlist'\nimport Scoreboard from './scoreboard'\nimport Totalscore from './totalscore'\nimport '../assets/css/home.css';\nimport { Row, Col, Container } from 'react-bootstrap';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { nextRound } from '../actions';\nexport default function Playgroud() {\n    const { round, call, final, total } = useSelector(state => state?.score);\n    const { numberOfPlayer } = useSelector(state => state?.home);\n    const maxCard = Math.floor(52 / numberOfPlayer);\n    const numberOfHands = maxCard - round + 1 >= 1 ? maxCard - round + 1 : round - maxCard + 1;\n    const maxRound = maxCard + maxCard - 1;\n    const dispatch = useDispatch();\n\n\n\n\n\n    const calculateScore = () => {\n        let roundScore = [];\n        let score = 0;\n        for (let idx = 0; idx < numberOfPlayer; idx++) {\n            score = 0;\n            const callHand = call[idx];\n            const finalHand = final[idx];\n\n            if (callHand == finalHand) {\n                score = parseInt(numberOfHands) + callHand;\n                console.log(\"🚀 ~ file: playgroud.js ~ line 33 ~ calculateScore ~ score\", score, numberOfHands)\n            }\n            else {\n                if (callHand == 0) {\n                    score = 0 - finalHand;\n                }\n                else if (callHand > finalHand) {\n                    score = callHand - (callHand - finalHand);\n                }\n                else {\n                    score = callHand + (callHand - finalHand);\n                }\n                console.log(\"🚀 ~ file: playgroud.js ~ line 43 ~ calculateScore ~ score\", score)\n            }\n            roundScore.push(score)\n        }\n        return roundScore;\n    }\n\n\n    const calculateTotalScore = (roundScore) => {\n        let newTotalScore = [];\n        for (let idx = 0; idx < numberOfPlayer; idx++) {\n            const score = roundScore[idx];\n            console.log(\"🚀 ~ file: playgroud.js ~ line 58 ~ calculateTotalScore ~ score\", score, idx)\n            newTotalScore[idx] = (total[idx] ? total[idx] : 0) + parseInt(score);\n        }\n\n        console.log(\"🚀 ~ file: playgroud.js ~ line 64 ~ calculateTotalScore ~ newTotalScore\", newTotalScore)\n        return newTotalScore;\n\n    }\n\n\n    const nextRoundCall = () => {\n        let roundScore = calculateScore();\n        let newTotalScore = calculateTotalScore(roundScore);\n        dispatch(nextRound(round + 1, parseInt(numberOfPlayer), roundScore, newTotalScore))\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col xs={12} md={2}>\n                    <h1 className=\"round\" >Round {round}</h1>\n                </Col>\n                \n                <Col xs={12} md={8}>\n                <h1 className=\"title\" >Estimation </h1>\n                </Col >\n                <Col xs={12} md={2}>\n                    <h1 className=\"hands\" >Hands {numberOfHands}</h1>\n                </Col>\n            </Row>\n            <Row style={{marginTop:\"8%\"}}>\n                <Col xs={12} md={10}>\n                    <Playerlist />\n                    <Scoreboard />\n                </Col>\n                <Col xs={9} md={2}>\n                    <Totalscore />\n                </Col>\n            </Row>\n            <Row >\n                <Col>\n                <center>\n                <span className=\"nextRound\" onClick={() => nextRoundCall()}>{round != maxRound ? `Next Round` : `Final Result`}</span>\n                </center>\n                </Col>\n            </Row>\n            {/* <div style={{float:'right'}}>\n            </div> */}\n        </Container>\n\n    )\n}\n","import {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\nimport HomeComp from './components/home';\nimport Players from './components/players';\nimport Playground from './components/playgroud'\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/players\" element={<Players/>}>\n        </Route>\n        <Route path=\"/playground\" element={<Playground/>}>\n        </Route>\n        <Route path=\"/\" element={<HomeComp/>}>\n        </Route>\n      </Routes>\n  </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SAVE_NUMBER_PLAYER} from '../constants'\n\nconst initialState = {\n    numberOfPlayer: ''\n};\n\n\nconst home = (state = initialState, action) => {\n    switch (action.type) {\n      case SAVE_NUMBER_PLAYER:\n          console.log(action.payload)\n        return {\n            ...state,\n            numberOfPlayer: action.payload\n        }\n      default:\n        return state\n    }\n  }\n  \n  export default home;\n  ","export default function arrayRotate(arr, reverse) {\n    console.log(\"******arr\",arr);\n    if (reverse) arr.unshift(arr.pop());\n    else arr.push(arr.shift());\n    console.log(\"******arr\",arr);\n    return arr;\n  }","import {SAVE_NAME_PLAYER,NEXT} from '../constants'\nimport arrayRotate from '../helpers';\n\nconst initialState = {\n    nameOfPlayers: []\n};\n\n\nconst player = (state = initialState, action) => {\n    console.log(action)\n    switch (action.type) {\n      case SAVE_NAME_PLAYER:\n        return {\n            ...state,\n            nameOfPlayers: [...state.nameOfPlayers, action.payload]\n        }\n        case NEXT:{\n            return {\n                ...state,\n                nameOfPlayers: arrayRotate(state.nameOfPlayers)\n            }   \n        } \n      default:\n        return state\n    }\n  }\n  \n  export default player;\n  ","import { CALL, FINAL, TOTAL, NEXT , MAX} from '../constants'\nimport arrayRotate from '../helpers';\n\nconst initialState = {\n    round: 1,\n    call: [],\n    final: [],\n    total: [],\n    lastRound: [],\n    maxHands: 0\n};\n\n\nconst score = (state = initialState, action) => {\n    console.log(action)\n    switch (action.type) {\n        case CALL:\n            if (state.call[action.payload.idx]!= undefined) {\n                return {\n                    ...state,\n                    call: state.call.map(\n                        (call, idx) => idx === action.payload.idx ? parseInt(action.payload.call)\n                            : call\n                    )\n                }\n            }\n            else {\n                return {\n                    ...state,\n                    call: [...state.call, parseInt(action.payload.call)]\n                }\n            }\n            break;\n\n        case FINAL:\n            if (state.final[action.payload.idx] != undefined) {\n                return {\n                    ...state,\n                    final: state.final.map(\n                        (final, idx) => idx === action.payload.idx ? parseInt(action.payload.final)\n                            : final\n                    )\n                }\n            }\n            else {\n                return {\n                    ...state,\n                    final: [...state.final, parseInt(action.payload.final)]\n                }\n            }\n            break;\n\n\n        case NEXT:{\n            return {\n                ...state,\n                call: new Array(action.payload.numberOfPlayer).fill(''),\n                final: new Array(action.payload.numberOfPlayer).fill(''),\n                round: action.payload.newRound,\n                total: arrayRotate(action.payload.newTotalScore),\n                lastRound: arrayRotate(action.payload.roundScore),\n                maxHands: 0\n            }\n        }\n        break;\n\n        case MAX:{\n            return {\n                ...state,\n                maxHands: action.payload\n            }\n        }\n        break;\n        default:\n            return state\n    }\n}\n\nexport default score;\n","import { combineReducers } from 'redux'\nimport home from \"./homeReducer\";\nimport player from \"./playerReducer\";\nimport score from \"./scoreReducer\";\n\nexport default combineReducers({\n    home,\n    player,\n    score\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport './assets/css/home.css'\n\n\n\nconst store = createStore(rootReducer)\nwindow.store = store;\n\n\nconsole.log(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}